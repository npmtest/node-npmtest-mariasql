{"/home/travis/build/npmtest/node-npmtest-mariasql/test.js":"/* istanbul instrument in package npmtest_mariasql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mariasql/lib.npmtest_mariasql.js":"/* istanbul instrument in package npmtest_mariasql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mariasql = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mariasql = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mariasql/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mariasql && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mariasql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mariasql\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mariasql.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mariasql.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mariasql.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mariasql.__dirname + '/lib.npmtest_mariasql.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mariasql/node_modules/mariasql/lib/Client.js":"var EventEmitter = require('events').EventEmitter;\nvar inherits = require('util').inherits;\nvar lookup = require('dns').lookup;\nvar isIP = require('net').isIP;\nvar ReadableStream = require('stream').Readable;\n\nvar LRU = require('lru-cache');\n\nvar addon;\ntry {\n  addon = require('../build/Release/sqlclient');\n} catch (ex) {\n  addon = require('../build/Debug/sqlclient');\n}\n\nvar binding = addon.ClientBinding;\n\nvar RE_PARAM = /(?:\\?)|(?::(\\d+|(?:[a-zA-Z][a-zA-Z0-9_]*)))/g;\nvar DQUOTE = 34;\nvar SQUOTE = 39;\nvar BSLASH = 92;\n\nvar EMPTY_LRU_FN = function(key, value) {};\n\nClient.escape = addon.escape;\nClient.version = addon.version;\n\nfunction Client(config) {\n  if (!(this instanceof Client))\n    return new Client(config);\n\n  EventEmitter.call(this);\n\n  this._handle = null;\n\n  if (typeof config === 'object' && config !== null)\n    this._config = config;\n  else\n    this._config = {};\n\n  var queryCache;\n  var ncache = 30;\n  if (typeof this._config.queryCache === 'number')\n    ncache = this._config.queryCache;\n  else if (typeof this._config.queryCache === 'object')\n    queryCache = this._config.queryCache; // Assume lru-cache instance\n  if (this._config.queryCache !== false && !queryCache)\n    queryCache = new LRU({ max: ncache, dispose: EMPTY_LRU_FN });\n\n  this._req = undefined;\n  this._queue = [];\n  this._queryCache = queryCache;\n  this._handleClosing = false;\n  this._tmrInactive = undefined;\n  this._tmrPingWaitRes = undefined;\n  this.connecting = false;\n  this.connected = false;\n  this.closing = false;\n  this.threadId = undefined;\n\n  if (this._config.threadId === false)\n    return;\n\n  // XXX: hack to get thread ID first before any other queries\n  var self = this;\n  this._firstQuery = {\n    str: 'SELECT CONNECTION_ID()',\n    cb: function(err, rows) {\n      if (err) {\n        self.emit('error', err);\n        self.close(true);\n        return;\n      }\n      self.threadId = rows[0][0];\n      self.connecting = false;\n      self.connected = true;\n      self.emit('ready');\n    },\n    result: undefined,\n    results: undefined,\n    needMetadata: false,\n    needColumns: false\n  };\n}\ninherits(Client, EventEmitter);\n\nClient.prototype._initHandle = function() {\n  if (this._handle !== null) {\n    return;\n  }\n  this._handle = new binding({\n    context: this,\n    config: this._config,\n    onconnect: this._onconnect,\n    onerror: this._onerror,\n    onidle: this._onidle,\n    onresultinfo: this._onresultinfo,\n    onrow: this._onrow,\n    onresultend: this._onresultend,\n    onping: this._onping,\n    onclose: this._onclose,\n  });\n}\n\nClient.prototype.connect = function(config, cb) {\n  if (typeof config === 'function') {\n    cb = config;\n    config = undefined;\n  }\n\n  this._initHandle();\n\n  if (this.connecting) {\n    if (typeof cb === 'function')\n      this.once('ready', cb);\n    return;\n  } else if (this.connected) {\n    if (typeof cb === 'function')\n      process.nextTick(cb);\n    return;\n  }\n\n  if (typeof cb === 'function')\n    this.once('ready', cb);\n\n  if (typeof config === 'object' && config !== null)\n    this._config = config;\n\n  var cfg = this._config;\n  var self = this;\n  if (typeof cfg !== 'object')\n    throw new Error('Missing config');\n\n  this.connecting = true;\n\n  setImmediate(function() {\n    // Doing a manual resolve prevents libmariadbclient from doing a blocking\n    // DNS resolve\n    self._initHandle();\n    if (!isIP(cfg.host)) {\n      lookup(cfg.host, function(err, address, family) {\n        if (err) {\n          self.connecting = false;\n          self.emit('error', err);\n          return self.emit('close');\n        }\n        cfg = clone(cfg);\n        cfg.host = address;\n        self._handle.connect(cfg);\n      });\n    } else\n      self._handle.connect(cfg);\n  });\n};\n\nClient.prototype.query = function(str, values, config, cb) {\n  var req;\n  var ret;\n  if (typeof str !== 'string')\n    throw new Error('Missing query string');\n  if (typeof values === 'function') {\n    // query(str, cb)\n    cb = values;\n    values = config = undefined;\n  } else if (typeof config === 'function') {\n    // query(str, ___, cb)\n    cb = config;\n    if (typeof values === 'boolean') {\n      config = values;\n      values = undefined;\n    } else\n      config = undefined;\n  } else if (typeof values === 'boolean') {\n    // query(str, config)\n    config = values;\n    values = undefined;\n  }\n\n  if (Array.isArray(values) || (typeof values === 'object' && values !== null))\n    str = this.prepare(str)(values);\n\n  var needColumns = (!config ||\n                     (typeof config === 'object'\n                      && config !== null\n                      && !config.useArray));\n  var needMetadata = ((config && config.metadata === true)\n                      || this._config.metadata === true);\n  if (typeof cb === 'function') {\n    // We are buffering all rows\n    req = {\n      cb: cb,\n      result: undefined,\n      results: undefined,\n      metadata: undefined,\n\n      str: str,\n      needColumns: needColumns,\n      needMetadata: needMetadata,\n      rowBuilder: undefined\n    };\n  } else {\n    // We are streaming all rows\n    var hwm = (config && config.hwm) || this._config.streamHWM;\n    req = {\n      emitter: new ResultEmitter(this._handle, hwm),\n      stream: undefined,\n\n      str: str,\n      needColumns: needColumns,\n      needMetadata: needMetadata,\n      rowBuilder: undefined\n    };\n    ret = req.emitter;\n  }\n\n  this._queue.push(req);\n\n  if (!this.connected)\n    this.connect();\n  else if (this._req === undefined) {\n    var self = this;\n    process.nextTick(function() {\n      self._processQueue(false);\n    });\n  }\n\n  return ret;\n};\n\nClient.prototype.close = function(force) {\n  if (!this.closing && (this.connected || this.connecting)) {\n    this.closing = true;\n    if (force || (this._req === undefined && this._queue.length === 0)) {\n      this._handleClosing = true;\n      this._handle.close();\n    }\n  }\n};\nClient.prototype.destroy = function() {\n  this.close(true);\n};\nClient.prototype.end = Client.prototype.close;\n\nClient.prototype.abort = function(killConn, cb) {\n  // TODO: support MariaDB-specific kill options\n\n  if (!this._req)\n    return;\n  if (typeof this.threadId !== 'string' || !this.threadId.length)\n    throw new Error('Cannot abort: no thread id');\n\n  if (typeof killConn === 'function') {\n    cb = killConn;\n    killConn = false;\n  }\n\n  var kind = (killConn ? 'CONNECTION' : 'QUERY');\n  var querystr = 'KILL ' + kind + ' ' + this.threadId;\n  var calledBack = false;\n\n  var abortClient = new Client(this._config);\n  abortClient._firstQuery = null;\n  abortClient.on('error', handler);\n  abortClient.connect(function() {\n    abortClient.query(querystr, handler);\n    abortClient.end();\n  });\n  function handler(err) {\n    if (calledBack)\n      return;\n    calledBack = true;\n    cb && cb(err);\n  }\n};\n\nClient.prototype.isMariaDB = function() {\n  this._initHandle();\n  return this._handle.isMariaDB();\n};\n\nClient.prototype.lastInsertId = function() {\n  this._initHandle();\n  return this._handle.lastInsertId();\n};\n\nClient.prototype.escape = function(str) {\n  this._initHandle();\n  return this._handle.escape(str);\n};\n\nClient.prototype.serverVersion = function() {\n  this._initHandle();\n  return this._handle.serverVersion();\n};\n\nClient.prototype.prepare = function(query) {\n  var cache = this._queryCache;\n  var cqfn;\n  if (cache && (cqfn = cache.get(query)))\n    return cqfn;\n\n  var ppos = RE_PARAM.exec(query);\n  var curpos = 0;\n  var start = 0;\n  var parts = [];\n  var wasInQuote = false;\n  var inQuote = false;\n  var escape = false;\n  var tokens = [];\n  var qcnt = 0;\n  var qchr;\n  var chr;\n  var end;\n  var fn;\n  var i;\n\n  if (ppos) {\n    do {\n      wasInQuote = inQuote;\n      for (i = curpos, end = ppos.index; i < end; ++i) {\n        chr = query.charCodeAt(i);\n        if (chr === BSLASH)\n          escape = !escape;\n        else {\n          if (escape) {\n            escape = false;\n            continue;\n          }\n          if (inQuote && chr === qchr) {\n            if (query.charCodeAt(i + 1) === qchr) {\n              // Quote escaped via \"\" or ''\n              ++i;\n              continue;\n            }\n            inQuote = false;\n          } else if (chr === DQUOTE || chr === SQUOTE) {\n            inQuote = true;\n            qchr = chr;\n          }\n        }\n      }\n\n      if (!inQuote) {\n        parts.push(query.slice(start, end));\n        if (wasInQuote)\n          tokens.push(null);\n        tokens.push(ppos[0].length === 1 ? qcnt++ : ppos[1]);\n        start = end + ppos[0].length;\n      }\n\n      curpos = end + ppos[0].length;\n    } while (ppos = RE_PARAM.exec(query));\n\n    if (tokens.length) {\n      if (end < query.length)\n        parts.push(query.slice(start));\n      var self = this;\n      fn = function(values) {\n        var ret = '';\n        for (var j = 0, t = 0; j < tokens.length; ++j) {\n          ret += parts[j];\n          if (tokens[j] === null)\n            continue;\n          ret += self._format_value(values[tokens[j]]);\n        }\n        if (j < parts.length)\n          ret += parts[j];\n        return ret;\n      };\n      var cache = this._queryCache;\n      cache && cache.set(query, fn);\n      return fn;\n    }\n  }\n  return function() { return query; };\n};\n\nClient.prototype._onconnect = function() {\n  var queue = this._queue;\n  if (queue.length === 0 || queue[0] !== this._firstQuery) {\n    if (this._firstQuery)\n      queue.unshift(this._firstQuery);\n    else {\n      this.connecting = false;\n      this.connected = true;\n      this.emit('ready');\n    }\n  }\n  this._processQueue(true);\n};\n\nClient.prototype._onerror = function(err) {\n  if (isDeadConn(err.code)) {\n    this.connecting = this.connected = false;\n    this.emit('error', err);\n    this._onclose(err);\n  } else {\n    var req = this._req;\n    if (req) {\n      if (req.cb !== undefined) {\n        var results = req.results;\n        if (results === undefined)\n          req.results = [err];\n        else\n          results.push(err);\n      } else {\n        var stream = req.stream;\n        if (stream === undefined) {\n          var emitter = req.emitter;\n          stream = emitter._createStream();\n          emitter.emit('result', stream);\n          stream.emit('error', err);\n          stream.push(null);\n          stream.read(0);\n        } else {\n          stream.emit('error', err);\n          stream.push(null);\n          req.stream = undefined;\n        }\n      }\n    } else\n      this.emit('error', err);\n  }\n};\n\nClient.prototype._onidle = function() {\n  var req = this._req;\n  if (req) {\n    // A query finished -- no more result sets\n    this._queue.shift();\n    this._req = undefined;\n    var cb = req.cb;\n    if (cb !== undefined) {\n      var results = req.results;\n      if (results.length === 1) {\n        // Single result set response\n\n        var r = results[0];\n        if (r instanceof Error)\n          cb(r);\n        else\n          cb(null, r);\n      } else {\n        // Multi-result set response\n\n        // TODO: \"null\" here can be a bit misleading if 1 of several\n        // results ended in error (can this even happen in reality?)\n        cb(null, results);\n      }\n    } else {\n      // Signal to the emitter that when the last QueryStream ends, that it's ok\n      // to emit 'end' as well ...\n      req.emitter._done = true;\n      if (!req.emitter._waitingForEnd)\n        req.emitter._complete(req.stream);\n    }\n  }\n  this._processQueue(false);\n};\n\nClient.prototype._onresultinfo = function(cols, metadata) {\n  var req = this._req;\n  if (req.cb !== undefined) {\n    if (req.needMetadata)\n      req.metadata = createMetadata(metadata);\n  } else {\n    var emitter = req.emitter;\n    var stream = req.stream = emitter._createStream();\n    if (req.needMetadata)\n      stream.info.metadata = createMetadata(metadata);\n    emitter.emit('result', stream);\n  }\n  if (req.needColumns)\n    req.rowBuilder = createRowBuilder(cols);\n};\n\nClient.prototype._onrow = function(row) {\n  var req = this._req;\n  var builder = req.rowBuilder;\n  if (req.cb !== undefined) {\n    if (builder) {\n      for (var i = 0; i < row.length; ++i)\n        row[i] = builder(row[i]);\n    }\n    req.result = row;\n  } else {\n    if (builder)\n      row = builder(row);\n    var stream = req.stream;\n    if (stream === undefined) {\n      var emitter = req.emitter;\n      stream = req.stream = emitter._createStream();\n      emitter.emit('result', stream);\n    }\n    if (stream.push(row) === false) {\n      this._handle.pause();\n      stream._needResume = true;\n    }\n  }\n};\n\nClient.prototype._onresultend = function(numRows, affectedRows, insertId) {\n  var req = this._req;\n  if (req.cb !== undefined) {\n    var results = req.results;\n    var result = req.result;\n    if (result === undefined) {\n      result = {\n        info: {\n          numRows: numRows,\n          affectedRows: affectedRows,\n          insertId: insertId,\n          metadata: req.metadata\n        }\n      };\n    } else {\n      req.result = undefined;\n      result.info = {\n        numRows: numRows,\n        affectedRows: affectedRows,\n        insertId: insertId,\n        metadata: req.metadata\n      };\n    }\n    req.metadata = undefined;\n    if (results !== undefined)\n      results.push(result);\n    else\n      req.results = [result];\n  } else {\n    var stream = req.stream;\n    if (stream === undefined) {\n      var emitter = req.emitter;\n      stream = emitter._createStream();\n      stream.info.numRows = numRows;\n      stream.info.affectedRows = affectedRows;\n      stream.info.insertId = insertId;\n      emitter.emit('result', stream);\n      stream.push(null);\n      stream.read(0);\n    } else {\n      stream.info.numRows = numRows;\n      stream.info.affectedRows = affectedRows;\n      stream.info.insertId = insertId;\n      stream.push(null);\n      req.stream = undefined;\n    }\n  }\n};\n\nClient.prototype._onping = function() {\n  clearTimeout(this._tmrPingWaitRes);\n  this._tmrPingWaitRes = undefined;\n  this._tmrInactive = undefined;\n  if (this._queue.length === 0)\n    this._ping();\n};\n\nClient.prototype._onclose = function(err) {\n  var self = this;\n  clearTimeout(this._tmrInactive);\n  clearTimeout(this._tmrPingWaitRes);\n  this._tmrInactive = undefined;\n  this._tmrPingWaitRes = undefined;\n  this.connecting = false;\n  this.connected = false;\n  this.closing = false;\n  this._handleClosing = false;\n\n  var keepQueries = this._config.keepQueries;\n  if (keepQueries === false || keepQueries === undefined) {\n    if (this._req !== undefined)\n      this._queue.unshift(this._req);\n    cleanupReqs(this._queue, err);\n    this._queue = [];\n  } else if (this._req !== undefined) {\n    // No easy way to \"recover\" the current request, so just remove it and clean\n    // it up\n    cleanupReqs([this._queue.shift()], err);\n  }\n  this._req = undefined;\n  if (!err)\n    this.emit('end');\n  this.emit('close');\n  // Allow addon handle to be garbage collected since we are no longer connected\n  // See: https://github.com/mscdex/node-mariasql/pull/130\n  //      https://github.com/mscdex/node-mariasql/pull/133\n  process.nextTick(function() {\n    if (!self.connecting\n        && !self.connected\n        && !self.closing\n        && !self._handleClosing) {\n      self._handle = null;\n    }\n  });\n};\n\nClient.prototype._processQueue = function(ignoreConnected) {\n  var connected = this.connected;\n  if (!ignoreConnected && !connected)\n    return;\n  var req = this._req;\n  if (req)\n    return;\n  var queue = this._queue;\n  if (queue.length > 0) {\n    // Allow an outstanding ping request to finish first\n    if (this._tmrPingWaitRes !== undefined)\n      return;\n    clearTimeout(this._tmrInactive);\n    this._tmrInactive = undefined;\n\n    req = this._req = queue[0];\n    this._handle.query(req.str,\n                       req.needColumns,\n                       req.needMetadata,\n                       req.cb !== undefined);\n  } else if (connected) {\n    if (this.closing && !this._handleClosing) {\n      this._handleClosing = true;\n      this._handle.close();\n    } else if (!this.closing)\n      this._ping();\n  }\n};\n\nfunction pingNoAnswer(self) {\n  self.emit('error', new Error('Ping response lost'));\n  self.close(true);\n}\nfunction pingCb(self) {\n  self._tmrPingWaitRes = setTimeout(pingNoAnswer,\n                                    self._config.pingWaitRes,\n                                    self);\n  self._handle.ping();\n}\nClient.prototype._ping = function() {\n  if (this._tmrInactive === undefined\n      && typeof this._config.pingInactive === 'number'\n      && typeof this._config.pingWaitRes === 'number'\n      && this._config.pingInactive > 0\n      && this._config.pingWaitRes > 0) {\n    this._tmrInactive = setTimeout(pingCb, this._config.pingInactive, this);\n  }\n};\n\nClient.prototype._format_value = function(v) {\n  if (Buffer.isBuffer(v))\n    return \"'\" + Client.escape(v.toString('utf8')) + \"'\";\n  else if (Array.isArray(v)) {\n    var r = [];\n    for (var i = 0, len = v.length; i < len; ++i)\n      r.push(this._format_value(v[i]));\n    return r.join(',');\n  } else if (v !== null && v !== undefined)\n    return \"'\" + Client.escape(v + '') + \"'\";\n\n  return 'NULL';\n};\n\n\n\nvar QueryStreamDefaultOpts = { objectMode: true };\nfunction ResultEmitter(handle, hwm) {\n  EventEmitter.call(this);\n  if (typeof hwm === 'number')\n    this._streamOpts = { objectMode: true, highWaterMark: hwm };\n  else\n    this._streamOpts = QueryStreamDefaultOpts;\n  this._handle = handle;\n  this._done = false;\n  this._waitingForEnd = false;\n}\ninherits(ResultEmitter, EventEmitter);\n\nResultEmitter.prototype._createStream = function() {\n  var qs = new QueryStream(this._handle, this._streamOpts);\n  var self = this;\n  this._waitingForEnd = true;\n  qs.on('end', function() {\n    self._waitingForEnd = false;\n    self._complete(qs);\n  });\n  return qs;\n};\n\nResultEmitter.prototype._complete = function(qs) {\n  if (this._done) {\n    if (qs && EventEmitter.listenerCount(qs, 'end') > 1) {\n      // We emit 'end' on the next tick to ensure proper event ordering\n      // (otherwise a user's QueryStream 'end' listener will get called\n      // *after* the ResultEmitter's 'end' because we add our 'end' listener\n      // first)\n      var self = this;\n      process.nextTick(function() {\n        self.emit('end');\n      });\n    } else\n      this.emit('end');\n  }\n};\n\nfunction QueryStream(handle, opts) {\n  ReadableStream.call(this, opts);\n  this._handle = handle;\n  this._needResume = false;\n  this.info = {\n    numRows: undefined,\n    affectedRows: undefined,\n    insertId: undefined,\n    metadata: undefined\n  };\n}\ninherits(QueryStream, ReadableStream);\nQueryStream.prototype._read = function(n) {\n  if (this._needResume) {\n    this._needResume = false;\n    this._handle.resume();\n  }\n};\n\n\n\nfunction clone(obj) {\n  var ret = {};\n  var keys = Object.keys(obj);\n  var key;\n  for (var i = 0; i < keys.length; ++i) {\n    key = keys[i];\n    ret[key] = obj[key];\n  }\n  return ret;\n}\n\nfunction cleanupReqs(queue, err) {\n  var len = queue.length;\n  if (!err) {\n    err = new Error('Connection closed early');\n    err.code = -1;\n  }\n  for (var i = 0, req; i < len; ++i) {\n    req = queue[i];\n    if (req.cb !== undefined)\n      req.cb(err);\n    else {\n      req.emitter._done = true;\n      var stream = req.stream;\n      if (stream && stream.readable) {\n        stream.emit('error', err);\n        stream.push(null);\n      }\n    }\n  }\n}\n\nfunction isDeadConn(code) {\n  return (code === 2006 || code === 2013 || code === 2055);\n}\n\nfunction createRowBuilder(cols) {\n  var fn = 'return {';\n  for (var i = 0; i < cols.length; ++i)\n    fn += JSON.stringify(cols[i]) + ': v[' + i + '],';\n  return new Function('v', fn + '}');\n}\n\nfunction createMetadata(data) {\n  var result = {};\n  var len = data.length;\n\n  if (len > 0) {\n    for (var i = 0, name; i < len;) {\n      name = data[i++];\n      result[name] = {\n        org_name: data[i++],\n        type: data[i++],\n        flags: data[i++],\n        charsetnr: data[i++],\n        db: data[i++],\n        table: data[i++],\n        org_table: data[i++]\n      };\n    }\n    // TODO: need (fastest) way to make fast properties for metadata object\n  }\n\n  return result;\n}\n\n// Field cannot be NULL\nClient.NOT_NULL_FLAG = 1;\n// Field is part of a primary key\nClient.PRI_KEY_FLAG = 2;\n// Field is part of a unique key\nClient.UNIQUE_KEY_FLAG = 4;\n// Field is part of a nonunique key\nClient.MULTIPLE_KEY_FLAG = 8;\n// Field is a BLOB or TEXT (deprecated)\nClient.BLOB_FLAG = 16;\n// Field has the UNSIGNED attribute\nClient.UNSIGNED_FLAG = 32;\n// Field has the ZEROFILL attribute\nClient.ZEROFILL_FLAG = 64;\n// Field has the BINARY attribute\nClient.BINARY_FLAG = 128;\n// Field is an ENUM\nClient.ENUM_FLAG = 256;\n// Field has the AUTO_INCREMENT attribute\nClient.AUTO_INCREMENT_FLAG = 512;\n// Field is a TIMESTAMP (deprecated)\nClient.TIMESTAMP_FLAG = 1024;\n// Field is a SET\nClient.SET_FLAG = 2048;\n// Field has no default value\nClient.NO_DEFAULT_VALUE_FLAG = 4096;\n// Field is set to NOW on UPDATE\nClient.ON_UPDATE_NOW_FLAG = 8192;\n// Field is part of some key\nClient.PART_KEY_FLAG = 16384;\n// Field is numeric\nClient.NUM_FLAG = 32768;\n\nmodule.exports = Client;\n"}